#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Get data from PMS5003 sensor and GPS, then append to a CSV file.

  * BME280 sensor is read from status file /var/run/pms5003.status.
  * GPS position is get via /usr/local/bin/gps-position.
  * CSV file is written to /CSV/pms_YYYYMMDD.csv.

The status file is written by a pms5003 daemon, so this program try
to start that daemon too, just in case it is not already running.
"""

import datetime
import os
import subprocess
import sys
import time

__author__ = "Niccolo Rigacci"
__copyright__ = "Copyright 2018 Niccolo Rigacci <niccolo@rigacci.org>"
__license__ = "GPLv3-or-later"
__email__ = "niccolo@rigacci.org"
__version__ = "0.1.0"

STATUS_FILE = '/var/run/pms5003.status'
CSV_LOG = '/CSV/pms_%s.csv' % (datetime.datetime.now().strftime('%Y%m%d'),)

try:
    # Start the PMS5003 daemon.
    # The command should do nothing, if the process is already running.
    subprocess.check_output(['/usr/local/lib/rpi-explorer-kit/daemonize-pms5003'])
except:
    pass

if not os.path.exists(STATUS_FILE):
    print("File '%s' does not exists." % (STATUS_FILE,))
    sys.exit(1)

if not os.path.exists(CSV_LOG):
    open(CSV_LOG, 'a').close()

# Write to CSV file, if newer data exists.
stat_timestamp = os.path.getmtime(STATUS_FILE)
csv_timestamp = os.path.getmtime(CSV_LOG)
now_timestamp = time.time()
if stat_timestamp > csv_timestamp:
    # Add current GPS position, if data is not older than 6 minutes.
    lat, lon, alt = '', '', ''
    if (now_timestamp - stat_timestamp) < (60 * 6):
        try:
            output = subprocess.check_output(['/usr/local/bin/gps-position']).splitlines()
            gps_str, lat, lon, alt = output[0].split()
            lat = '%0.6f' % float(lat)
            lon = '%0.6f' % float(lon)
            alt = '' if alt == 'None' else '%0.2f' % float(alt)
        except:
            lat, lon, alt = '', '', ''
    #print(lat, lon, alt)
    with open(STATUS_FILE, 'r') as f:
        line = f.readline().strip()
        with open(CSV_LOG, 'a') as l:
            l.write(','.join(line.split() + [lat, lon, alt]) + '\n')
